Prior to v0.1 release
---------------------
* [DONE] Create basic assertions and assertion pack
* [DONE] Create basic recorder for assertions
* [DONE] Create reader for recorded results so they can be used by the test controller to display results
    * [DONE] Create result object for iterating over read results
* [DONE] Create Test_Section interface
* [DONE] Create implementation for each of the base Sections that are supported in the current
  phpt implementation: env, post, postraw, get, ini, cookie, stdin, clean, expect, expectf,
  expectregexp, skipif, and args.
* [DONE] Create SectionList object to contain all Sections
    * [DONE] Implement filterByInterface code that can request certain types of Section_* filters:
* [DONE] Add Section_RunBefore interface for filtering - make sure Case::run() executes before run()
* [DONE] Add Section_RunAfter interface for filtering - make sure Case::run() executes after run()
* Determine and implement how sections will modify Case's command.  Possible solutions:
    - Case::$command that can be modified
    - Case_CommandBuilder object that looks at sections and builds command based on available
      sections
    - Move functionality into Test_Runner object
* [DONE] Create test file parser capable of:
    * [DONE] parsing pre-run sections
        * [DONE] create env, post, postraw, get, ini, cookie, and stdin sections
    * [DONE] parsing post-run secionts
        * [DONE] create clean, expect, expectf, and expectregexp sections
    * [DONE] returning a ready-to-run test case
* Create a test case/code runner
    * Add CodeRunner_Proc to handle proc_open() runs
    * Add CodeRunner_OutputBuffer to handle ob_start() based runs
* Create CodeRunner_Factory for building CodeRunner instances that are ready to run.
  Should be able to:
    * Set environment vars if present in test case
    * Set ini settings if present in test case
    * Set any arguments to pass to execution
    * Pass any posted vars
* Create a suite capable of running multiple test cases
* Create script for running tests
* Create build file to handle packaging
* [DONE] Consider making a new Domain51_Test_Section_Runnable interface to specify run() method:
    - There's a lot of code, particularly in the setup, that doesn't need to be run.

### Possible v0.1, maybe v0.2
* Add tests to all Sections insuring that they are instantiated with a string:
    - assert('is_string($data)');
* Add in code at the CodeRunner_Factory level that will always return a CodeRunner_OutputBuffer
  unless the particular test case has to modify the environment.

### Goals
* Capable of running its own tests
* Capable of running all of the tests in PEAR

Prior to v0.2 release
---------------------
* Add Section_FileModifier interface for modifying Section_File
* Implement Section_Redirecttest
* Add SETUP section
* Add TEARDOWN section
* Add ASSERT and/or ASSERTOBJECT section
* Add Section_FileModifier interface for modifying the FILE section
* Create Domain51_Test_Section_Modifiable abstract to handle one object modifying another
  object.
